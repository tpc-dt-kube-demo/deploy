@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [ context: 'CONTEXTLESS', key: 'dt-kube-demo-environment', value: 'staging' ]
    ]
  ]
]

pipeline {
  agent {
    label 'maven'
  }
  parameters {
    string(name: 'frontendversion',        defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'orderserviceversion',    defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'customerserviceversion', defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'catalogserviceversion',  defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'registry',               defaultValue: 'robjahn', description: 'Dockerhub account with Docker Images')        
  }
  stages {
    
    stage('Deploy') {
      environment {
        frontendimage = "${params.registry}/front-end:${params.frontendversion}"
        orderserviceimage = "${params.registry}/order-service:${params.orderserviceversion}"
        customerserviceimage = "${params.registry}/customer-service:${params.customerserviceversion}"
        catalogserviceimage = "${params.registry}/catalog-service:${params.catalogserviceversion}"
      }
      steps {
        script {
          echo "============================================="
          echo "Deployment configuration"
          echo "registry               : ${params.registry}"
          echo "frontendimage          : ${env.frontendimage}"
          echo "orderserviceimage      : ${env.orderserviceimage}"
          echo "customerserviceimage   : ${env.customerserviceimage}"
          echo "catalogserviceimage    : ${env.catalogserviceimage}"
          echo "============================================="

          sh "sed -i 's/REPLACE_NAMESPACE/staging/g' front-end.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/staging/g' order-service.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/staging/g' customer-service.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/staging/g' catalog-service.yml"

          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.frontendimage}#g' front-end.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.orderserviceimage}#g' order-service.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.customerserviceimage}#g' customer-service.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.catalogserviceimage}#g' catalog-service.yml"

          sh "cat front-end.yml"
          sh "cat order-service.yml"
          sh "cat customer-service.yml"
          sh "cat catalog-service.yml"

          container('kubectl') {
            sh "kubectl apply -f front-end.yml"
            sh "kubectl apply -f catalog-service.yml"
            sh "kubectl apply -f customer-service.yml"
            sh "kubectl apply -f order-service.yml"
          }
        }
      }
    }

    stage('Health Check') {
      steps {
        container('kubectl') {
          sleep 20
          sh "kubectl get pods -n staging"
        }
        container('curl') {
          echo "Waiting for the service to start..."
          sleep 40
          echo "Execute a couple of CURL commands to verify UI is up..."
          executeCurl(2, "http://front-end.staging")
        }
      }
    }

    stage('Push Dynatrace Deployment Event') {
      steps {
        script {
          echo "Waiting for the service to be tagged..."
          sleep 20

          // push event using Jenkins plugin
          // https://github.com/jenkinsci/performance-signature-dynatrace-plugin/blob/master/dynatrace/README.md
          createDynatraceDeploymentEvent(
            envId: 'Dynatrace Tenant', 
            tagMatchRules: tagMatchRules,
            customProperties: [[key: 'frontendversion', value: "${params.frontendversion}"],[key: 'orderversion', value: "${params.orderserviceversion}"],[key: 'customerversion', value: "${params.customerserviceversion}"],[key: 'catalogversion', value: "${params.catalogserviceversion}"]]
          ) {
              // do nothing. Need to do this after the wait as to have service up 
            }
        }
      }
    }
    
    stage('Run e2e load test') {

      steps {
        // push custom info event with context information using Jenkins plugin
        // https://github.com/jenkinsci/performance-signature-dynatrace-plugin/blob/master/dynatrace/README.md
        recordDynatraceSession (
          envId: 'Dynatrace Tenant',
          testCase: 'loadtest',
          tagMatchRules: tagMatchRules
        )

        {
            // calls script imported into Jenkins from this library
            // https://github.com/dynatrace-innovationlab/jenkins-extensions
          container('jmeter') {
            // need to remove report folder from workspace else jmeter errors
            sh "rm -rf e2eCheck"
            // remove logs from workspace
            sh "rm -f e2eCheck_result.tlf"
            sh "rm -f output.txt"

            script {
              def status = executeJMeter ( 
                scriptName: "jmeter/front-end_e2e_load.jmx",
                resultsDir: "e2eCheck",
                serverUrl: "front-end.staging", 
                serverPort: 80,
                checkPath: '/',
                vuCount: 10,
                loopCount: 10,
                LTN: "staging_e2eCheck_${env.BUILD_ID}",
                funcValidation: false,
                avgRtValidation: 4000
              )
              if (status != 0) {
                currentBuild.result = 'FAILED'
                error "e2e load test failed."
              }
            }
          }
        }
      }
    }

    stage('quality gate') {
      steps {

        // evaluate monspec file as a quality gate using Jenkins plugin
        // https://github.com/jenkinsci/performance-signature-dynatrace-plugin/blob/master/dynatrace/README.md
        perfSigDynatraceReports(
          envId: 'Dynatrace Tenant', 
          nonFunctionalFailure: 1, 
          specFile: "monspec/e2e_perfsig.json"
        )
      }
    }
  }
}

def executeCurl(iterations, url) {
    for (int i = 0; i < iterations; i++) {
        sh "echo calling ${url}"
        sh "curl ${url} -f"
    }
}
